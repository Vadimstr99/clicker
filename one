import requests
import json
import time
import asyncio
import aiohttp
from datetime import datetime
from selenium import webdriver
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from seleniumwire import webdriver


from MBbot2Config import *

results = []


def salePage():
    driver.get(urlSalePage)
    time.sleep(5)

    #клик на 1й бокс (возможно, при нескольких, будет несколько див
   # box_num = driver.find_element_by_xpath('/html/body/div[1]/div/div[2]/main/div/div/div[5]/div[2]/div/div')
   # box_num.click()
   # time.sleep(5)

    input_sum = driver.find_element_by_xpath('/html/body/div[1]/div/div[2]/main/div/div/div[6]/div[2]/div/div[1]/input')
    input_sum.click() 
    input_sum.clear()
    input_sum.send_keys(5)
    time.sleep(5)

    driver.find_element_by_xpath('/html/body/div[1]/div/div[2]/main/div/div/div[9]/button[2]').click()
    print('sale-page- after sleep click')

def getHeaders(driver):
    headers = {}
    driver.get(getHeadersPage)
    input("Лайкни любой NFT из маркетплейса и нажми Enter")

    for request in driver.requests:
        if str(request.url) == 'https://www.binance.com/bapi/nft/v1/private/nft/user-approve/approve':
            cookies = request.headers['cookie']
            csrftoken = request.headers['csrftoken']
            #deviceinfo = 'eyJzY3JlZW5fcmVzb2x1dGlvbiI6Ijg1OCwxNTI1IiwiYXZhaWxhYmxlX3NjcmVlbl9yZXNvbHV0aW9uIjoiODEzLDE1MjUiLCJzeXN0ZW1fdmVyc2lvbiI6IldpbmRvd3MgNyIsImJyYW5kX21vZGVsIjoidW5rbm93biIsInN5c3RlbV9sYW5nIjoiZW4tVVMiLCJ0aW1lem9uZSI6IkdNVCs2IiwidGltZXpvbmVPZmZzZXQiOi0zNjAsInVzZXJfYWdlbnQiOiJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCA2LjE7IFdpbjY0OyB4NjQ7IHJ2OjkzLjApIEdlY2tvLzIwMTAwMTAxIEZpcmVmb3gvOTMuMCIsImxpc3RfcGx1Z2luIjoiIiwiY2FudmFzX2NvZGUiOiIyOWI5YmU4MyIsIndlYmdsX3ZlbmRvciI6Ikdvb2dsZSBJbmMuIiwid2ViZ2xfcmVuZGVyZXIiOiJBTkdMRSAoSW50ZWwoUikgSEQgR3JhcGhpY3MgRGlyZWN0M0QxMSB2c181XzAgcHNfNV8wKSIsImF1ZGlvIjoiMzUuNzM4MzI5NTkzMDkyMiIsInBsYXRmb3JtIjoiV2luMzIiLCJ3ZWJfdGltZXpvbmUiOiJBc2lhL0FsbWF0eSIsImRldmljZV9uYW1lIjoiRmlyZWZveCBWOTMuMCAoV2luZG93cykiLCJmaW5nZXJwcmludCI6Ijg3YmY0OTA2ZDU3NDc4ZTE0NjAwMzQwYmY3MWUyYTUzIiwiZGV2aWNlX2lkIjoiIiwicmVsYXRlZF9kZXZpY2VfaWRzIjoiMTYyOTEzODQ2NTA4NHBCVTJIS2JOeWhjRWRKRkpHMGksMTYyOTk4Mjk5NzgwMnBPQWVDMGRmcldqUUZxV2NZTmEsMTYyOTk4NTIzMTY3MXlndGlyOFhBOWZWWW93TWFRRDcifQ=='
            #Стоял статичный, попробуем просто брать из хедеров
            deviceinfo = request.headers['device-info'] 
            useragent = 'Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0'

            xNftCheckbotSitekey = request.headers['x-nft-checkbot-sitekey']
            xNftCheckbotToken = request.headers['x-nft-checkbot-token']
            xTraceId = request.headers['x-trace-id']
            xUiRequestTrace = request.headers['x-ui-request-trace']

            headers = {
                'Host': 'www.binance.com',
                'Accept': '*/*',
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate, br',
                'clienttype': 'web',
                'x-nft-checkbot-token': xNftCheckbotToken,
                'x-nft-checkbot-sitekey': xNftCheckbotSitekey,
                'x-trace-id': xTraceId,
                'x-ui-request-trace': xUiRequestTrace,
                'content-type': 'application/json',
                'cookie': cookies,
                'csrftoken': csrftoken, 
                'device-info': deviceinfo,
                'user-agent': useragent
            }
    print(headers)
    return headers


def check_exists_by_xpath(path):
    try:
        driver.find_element_by_xpath(path)
    except NoSuchElementException:
        return False
    return True

async def do_nft_purcache(session, delay):
    await asyncio.sleep(delay)
    r = await session.post(PURC_URL, data=json.dumps(js), ssl=False)
    now = datetime.now()
    print(f'{now.strftime("%m/%d/%Y, %H:%M:%S")} DELAY {delay:.2f} status {r.status}')
    return r

def get_tasks(session):
    tasks = []
    
    delay = 0.0
    for i in range(0, requestsNumber):
        tasks.append(asyncio.create_task(do_nft_purcache(session, delay)))
        delay += PURC_DELAY

    # tasks.extend([asyncio.create_task(session.post(url, data = json.dumps(js), ssl=False))] * 100)
    print(len(tasks))
    return tasks


async def get_symbols(headers):
    async with aiohttp.ClientSession(headers=headers) as session:
        tasks = get_tasks(session)
        print(time.time())
        responses = await asyncio.gather(*tasks)
        for response in responses:
            results.append(await response.text())


def startSsc(headers):
    asyncio.get_event_loop().run_until_complete(get_symbols(headers))

if __name__ == "__main__":
    driver = webdriver.Chrome(ChromeDriverManager().install())
    driver.maximize_window()
    driver.get("https://binance.com/ru/nft")
    input('Залогинтесь и нажмите Enter: ')

    headers = getHeaders(driver)

    print('===AFTER SALEPAGE HI====')

    while True:
        ts = time.time()
        if saleTime > ts:
            print(f'{saleTime-ts:.1f} - осталось секунд')
            time.sleep(0.33)
        else:
            break

    startSsc(headers)

    print("Request results:")
    for r in results:
        if len(r)>250:
            print('blocked')
        else:
            print(r)

